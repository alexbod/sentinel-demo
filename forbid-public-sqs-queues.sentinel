# ***** Imports ***** #
import "tfplan"
import "strings"
import "json"


# ***** Shared Functions ***** #
# Shared functions to help writing policies.
find_resources = func(type) {
	resources = {}
	# Iterate over all modules in the tfplan import
	for tfplan.module_paths as path {
		# Iterate over the named resources of desired type in the module
		for tfplan.module(path).resources[type] else {} as name, instances {
			# Iterate over resource instances
			for instances as index, r {

				# Get the address of the instance
				if length(path) == 0 {
					# root module
					address = type + "." + name + "[" + string(index) + "]"
				} else {
					# non-root module
					address = "module." + strings.join(path, ".module.") + "." +
						type +
						"." +
						name +
						"[" +
						string(index) +
						"]"
				}

				# Add the instance to resources map, setting the key to the address
				resources[address] = r
			}
		}
	}

	return resources
}

# **************************** #
# ***** Functions ****** #
# insert functions here

ecr_checks = func() {
	status_policy = true

	for ecr_resources as _, ecr {
		if ecr.destroy and not ecr.requires_new {
			# Skipping resources that are being destroyed
			continue
		}
		# Check for ECR policy value
		ecr_policy_value = get_policy(ecr.applied.name)
		ecr_policy_check = check_policy(ecr_policy_value)
		if (ecr_policy_check == false) {
			status_policy = false
		}
    
	}

	if status_policy is false {
		print(FIX_MESSAGE_OPEN_POLICY)
	}
	return status_policy
}

get_policy = func(name) {
	for policy_resources as _, policy {
		if policy.applied.repository == name {
			return policy.applied.policy
		}

	}
	return ""
}

check_policy = func(policy) {
	if policy == "" {
		return true # empty policy
	}
	j = json.unmarshal(policy)
    print(j)
	for j["Statement"] as statement {
		if statement["Principal"] == "*" {
			return false
		}
	}
	return true
}


# ***** Variables ****** #
ecr_resources = find_resources("aws_sqs_queue")
policy_resources = find_resources("aws_sqs_queue_policy")
FIX_MESSAGE_OPEN_POLICY = "# Do not use an open policy to the ECR image. This makes the ECR image publicly accessible to everyone.\n\n Don't set \"Principal\" to \"*\"."


# ***** Rules ****** #
main = rule {
	ecr_checks()
}
