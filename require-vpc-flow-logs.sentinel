# This policy uses the Sentinel tfplan import to require that
# all S3 buckets have to be encrypted

##### Imports #####

import "tfplan"
import "strings"
import "tfconfig"
import "tfrun"



# Allowed unencrypted s3 buckets
allowed_s3_unencrypted = [
   "test",
]

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

print(tfplan.module_paths)
print(tfconfig.module_paths)

for tfplan.module_paths as path {
    print(tfplan.module(path))

}

for tfconfig.module_paths as path {
    print(tfplan.module(path))
    
}

# Function to validate that encryption used
validate_encryption = func() {

  # Initialize booleans to true
  # They will be set to false if any instances violate rules
  result = {
    "encrypted": true,
  }

  # Get all resources of specified type
  resource_instances = find_resources_from_plan("aws_vpc")

  print(resource_instances)
  
  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resources that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    print(r.applied.id)
    
    //print(r)
    //print(r.applied.versioning)
    //print(r.applied.versioning[0].enabled)
    //print(length(r.applied.versioning))
    //print(r.applied.versioning[0].enabled != true)
    //print(length(r.applied.versioning) else 0 == 0)

  }
    
  
  resource_instances_flogs = find_resources_from_plan("aws_flow_log")

  print(resource_instances_flogs)
  
  # Loop through the resource instances
  for resource_instances_flogs as address, r {

    # Skip resources that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    print(r.applied.id)
    
    //print(r)
    //print(r.applied.versioning)
    //print(r.applied.versioning[0].enabled)
    //print(length(r.applied.versioning))
    //print(r.applied.versioning[0].enabled != true)
    //print(length(r.applied.versioning) else 0 == 0)

  }


  # Return result with booleans which will be false if there were any violations
  return result
}


# Find all providers aliases of given type using the tfconfig import
find_provider_aliases = func(type) {

  # We will find all provider aliases og given type from tfconfig,
  # meaning providers.TYPE.alias.ALIAS
  providers = {}

  # Iterate over all modules in the tfconfig import
  for tfconfig.module_paths as path {
    # Iterate over providers of given type in module
    aliases = tfconfig.module(path).providers[type]["alias"] else {}
    for aliases as alias, data {
      # Change default alias ("") to "default"
      if alias is "" {
        alias = "default"
      }

      # Get the address of the provider alias
      if length(path) == 0 {
        # root module
        address =  type + "." + alias
      } else {
        # non-root module
        address = "module." + strings.join(path, ".module.") + "." +
                  type + "." + alias
      }

      providers[address] = data

    } // end aliases loop
  } // end module_paths loop

  return providers
}

# Determine role_arn of a provider from its data
determine_role_arn = func(data) {

  # Return empty string if provider does not assume a role
  role_arn_value = ""

  # Check for role_arn in config
  if (length(data["config"]) else 0) > 0 and
     (length(data["config"]["assume_role"]) else 0) > 0 {
    config_assume_role = data["config"]["assume_role"]
    if config_assume_role[0]["role_arn"] else null is not null {
      role_arn = config_assume_role[0]["role_arn"]
      # This would only happen for Terraform 0.11 since a reference
      # to a variable in Terraform 0.12 would end up in
      # the references value
      if role_arn matches "\\$\\{var\\.(.*)\\}" {
        # role_arn of AWS provider was a Terraform 0.11 style variable
        role_arn_variable = strings.trim_suffix(strings.trim_prefix(role_arn, "${var."), "}")
        role_arn_value = tfplan.variables[role_arn_variable]
      } else {
        # role_arn of AWS provider was hard-coded role_arn
        role_arn_value = role_arn
      } // end determination of role_arn type
    } // end role_arn in config test
  } // end config test

  # Check for role_arn in references
  if (length(data["references"]) else 0) > 0 and
     (length(data["references"]["assume_role"]) else 0) > 0 {
    references_assume_role = data["references"]["assume_role"]
    if references_assume_role[0]["role_arn"] else null is not null and
       length(references_assume_role[0]["role_arn"]) > 0 {
      role_arn = references_assume_role[0]["role_arn"][0]
      if role_arn matches "\\$\\{var\\.(.*)\\}" {
        # role_arn of AWS provider was a Terraform 0.11 style variable
        role_arn_variable = strings.trim_suffix(strings.trim_prefix(role_arn, "${var."), "}")
        role_arn_value = tfplan.variables[role_arn_variable]
      } else if role_arn matches "var\\.(.*)" {
        # role_arn of AWS provider was a Terraform 0.12 style variable
        role_arn_variable = strings.trim_prefix(role_arn, "var.")
        role_arn_value = tfplan.variables[role_arn_variable]
      } // end determination of role_arn type
    } // end role_arn in references test
  } // end references test

  return role_arn_value
}




##### Rules #####

# Call the validation function
validations = validate_encryption()
all_buckets_encrypted = validations["encrypted"]

# Main rule
main = rule {
  all_buckets_encrypted
}
