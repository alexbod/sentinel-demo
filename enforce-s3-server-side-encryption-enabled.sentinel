import "tfplan"


allowed_s3_unencrypted = [
  "b",
  "my-tf-test-bucket-test",
]

# Get all unencrypted S3 buckets from all modules
get_s3_buckets = func() {
    buckets = []
    for tfplan.module_paths as path {            
            resources = values(tfplan.module(path).resources.aws_s3_bucket) else []
            for resources as _, r {                
               if r[0].applied not contains "server_side_encryption_configuration" {
                  buckets += values(tfplan.module(path).resources.aws_s3_bucket) else []
		  if r[0].applied.bucket not in allowed_s3_unencrypted {
		  	print(r[0].applied.bucket + " does not have server side encryption configured. Please enable server side encryption for this s3 bucket. An example:
			  server_side_encryption_configuration {
			    rule {
			      apply_server_side_encryption_by_default {
				sse_algorithm     = /"AES256/"
			      }
			    }
			  }


			  server_side_encryption_configuration {
			    rule {
			      apply_server_side_encryption_by_default {
				kms_master_key_id = /"arn:aws:kms:us-east-1:753646501470:key/00c892e8-40c4-4048-a650-0f755876503d/"
				sse_algorithm     = /"aws:kms/"
			      }
			    }
			")
		  }
               } else if r[0].applied.server_side_encryption_configuration[0]["rule"][0].apply_server_side_encryption_by_default[0] not contains "sse_algorithm" {
                  buckets += values(tfplan.module(path).resources.aws_s3_bucket) else []
		  if r[0].applied.bucket not in allowed_s3_unencrypted {
		  	print(r[0].applied.bucket + " does not have server side encryption configured. Please enable server side encryption for this s3 bucket.")
		  }
               }
            }
    }
    return buckets
}
  
s3_buckets = get_s3_buckets()
print("Unencrypted s3 buckets:")
print(s3_buckets)

#for get_s3_buckets as address, bucket {
	#print(address + " " + bucket + " does not have server side encryption configured.")
#}

# Rule to require server-side encryption
s3_in_allowed_list = rule {
    all s3_buckets as _, instances {
      all instances as index, r {
        r.applied.bucket in allowed_s3_unencrypted
      }
   }
}
  
# Main rule that requires other rules to be true
main = rule {
  s3_in_allowed_list
}
