import "strings"
import "types"

_modules = {
	"root": {
		"data":    {},
		"modules": {},
		"outputs": {},
		"providers": {
			"aws": {
				"alias": {
					"": {
						"config": {
							"region": "us-east-1",
						},
						"references": {
							"region": [],
						},
						"version": "",
					},
				},
				"config": {
					"region": "us-east-1",
				},
				"references": {
					"region": [],
				},
				"version": "",
			},
		},
		"resources": {
			"aws_s3_bucket": {
				"b": {
					"config": {
						"acl":    "private",
						"bucket": "my-tf-test-bucket",
						"server_side_encryption_configuration": [
							{
								"rule": [
									{
										"apply_server_side_encryption_by_default": [
											{
												"kms_master_key_id": "arn:aws:kms:us-east-1:753646501470:key/00c892e8-40c4-4048-a650-0f755876503d",
												"sse_algorithm":     "aws:kms",
											},
										],
									},
								],
							},
						],
						"tags": {
							"Environment": "Dev",
							"Name":        "My bucket",
						},
					},
					"provisioners": null,
					"references": {
						"acl":    [],
						"bucket": [],
						"server_side_encryption_configuration": [
							{
								"rule": [
									{
										"apply_server_side_encryption_by_default": [
											{
												"kms_master_key_id": [],
												"sse_algorithm":     [],
											},
										],
									},
								],
							},
						],
						"tags": [],
					},
				},
			},
		},
		"variables": {},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
