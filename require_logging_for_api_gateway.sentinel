# This policy uses the Sentinel tfplan import to require that
# all IAM access keys have pgp key specified

##### Imports #####

import "tfplan"
import "strings"


##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Function to validate that IAM access keys have pgp key specified
validate_pgp_key_for_IAM_access_keys = func() {

  # Initialize booleans to true
  # They will be set to false if any instances violate rules
  result = {
    "pgp_key_specified": true,
  }

  # Get all resources of specified type
  resource_instances = find_resources_from_plan("aws_api_gateway_method_settings")
  
  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resources that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }
    
    print(r)
    print(r.applied.settings.logging_level)
    

    
    # Determine if pgp_key attribute is computed.
    if r.diff["settings.0.logging_level"].computed else false is true {
      print("aws_iam_access_key ", address, " has attribute pgp_key that is computed.")
      # If you want computed values to cause the policy to fail,
      # uncomment the next line.
      # result["pgp_key_specified"] = false
    } /* else {
      # Check whether pgp_key attribute is specified
      if length(r.applied.settings.logging_level) else 0 == 0 and r.applied.settings.logging_level !=  "OFF" {
        print("aws_iam_access_key ", address, " does not have pgp_key specified.")
        print("Please enable pgp_key for aws_iam_access_key. Example:")
        print("pgp_key = \"<public key>\"")
        result["pgp_key_specified"] = false
      }
    } // end pgp_key computed check
    */

  } // end resource instances

  # Return result with booleans which will be false if there were any violations
  return result
}

##### Rules #####

# Call the validation function
validations = validate_pgp_key_for_IAM_access_keys()
all_IAM_access_keys_pgp_key = validations["pgp_key_specified"]

# Main rule
main = rule {
  all_IAM_access_keys_pgp_key
}
