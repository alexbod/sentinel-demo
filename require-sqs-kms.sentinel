##### Imports #####

import "tfplan"
import "strings"


##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Find diff
find_diff_from_plan = func(type) {

	resources = []

	for tfplan.module_paths as path {
		for tfplan.module(path).resources[type] else {} as name, instances {
			for instances as index, r {
				resources += [r.diff["rest_api_id"]["new"]]
			}
		}
	}

	return resources
}

# Function to validate that encryption used
validate_encryption = func() {

	# Initialize booleans to true
	# They will be set to false if any instances violate rules
	result = {
		"encrypted": true,
	}

	# Get all resources of specified type
	resource_instances = find_resources_from_plan("aws_sqs_queue")

	# Loop through the resource instances
	for resource_instances as address, r {

		# Skip resources that are being destroyed
		# to avoid unnecessary policy violations.
		# Used to be: if length(r.diff) == 0
		if r.destroy and not r.requires_new {
			print("Skipping resource", address, "that is being destroyed.")
			continue
		}

		# Check whether server-side encryption is enabled
		if length(r.applied.kms_master_key_id) else 0 == 0 {
            print("SQS", address, "is not encrypted.")
            print("Please enable server side encryption. Example:")
            print("kms_master_key_id                 = \"alias/aws/sqs\"")
            result["encrypted"] = false
		}

	} // end resource instances

	# Return result with booleans which will be false if there were any violations
	return result
}

##### Rules #####

# Call the validation function
validations = validate_encryption()

# Main rule
main = rule {
	validations["encrypted"]
}
