##### Imports #####
#import "tfconfig/v2" as tfconfig
import "tfconfig"
import "strings"
import "types"

/*
### find_resources_by_type ###
# Find all resources of a specific type using the tfconfig/v2 import.
# The parameter, type, should be a string like "aws_instance".
find_resources_by_type = func(type) {
  resources = filter tfconfig.resources as address, r {
    r.type is type and
    r.mode is "managed"
  }

  return resources
}
*/


# Find all resources of specific type from all modules using the tfconfig import
find_resources_from_config = func(type) {

  resources = {}

  # Iterate over all modules in the tfconfig import
  for tfconfig.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfconfig.module(path).resources[type] else {} as name, r {

      # Get the address of the resource
      if length(path) == 0 {
        # root module
        address = type + "." + name
      } else {
        # non-root module
        address = "module." + strings.join(path, ".module.") + "." +
                  type + "." + name
      }

      # Add the resource to resources map, setting the key to the address
      resources[address] = r
    }
  }

  return resources
}

vpc_resources = find_resources_from_config("aws_vpc")
flow_resources = find_resources_from_config("aws_flow_log")
//print(vpc_resources)
//print(flow_resources)

#vpc_resources = find_resources_by_type("aws_vpc")
#flow_resources = find_resources_by_type("aws_flow_log")

vpc_with_references = []
results = true

for flow_resources as address, r_flow_addr {
  //print(address)
  //print(r_flow_addr.config.vpc_id[2 : length(r_flow_addr.config.vpc_id) - 4])
  for vpc_resources as address_vpc, r_vpc_addr {
    print(r_flow_addr.config.references)
    if r_flow_addr.config.vpc_id[2 : length(r_flow_addr.config.vpc_id) - 4] == address_vpc {
      print("Found")
      print(address_vpc)
      append(vpc_with_references, address_vpc)
    }
    
    //print(address_vpc)
    //print("Yes")
    //print(flow_resources[flow_addr].config.vpc_id)
    //print(flow_addr)
  }
}

for vpc_resources as address, r {
  if address not in vpc_with_references {
    print(address, "doesn't have VPC Flow Logs configured")
    results = false
  }
}

/*
for keys(flow_resources) as flow_addr {
  for keys(vpc_resources) as vpc_addr {
    if flow_resources[flow_addr].config.vpc_id.references[0] == vpc_resources[vpc_addr].address {
      append(vpc_with_references, vpc_resources[vpc_addr].address)
      print("Found flow log ",  flow_addr)
      print("With reference to VPC ", flow_resources[flow_addr].config.vpc_id.references[0])
    }
  }
}
*/

main = rule { 
    results
}
