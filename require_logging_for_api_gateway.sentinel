# This policy uses the Sentinel tfplan import to require that
# all API Gateway resources have logging enabled

##### Imports #####

import "tfplan"
import "strings"


##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Function to validate logging for api gateway
validate = func() {

  # Initialize booleans to true
  # They will be set to false if any instances violate rules
  result = {
    "logging_for_api_gateway": true,
  }

  # Get all resources of specified type
  resource_instances = find_resources_from_plan("aws_api_gateway_method_settings")
  
  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resources that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }
    
    # Check whether logging for api gateway is enabled
    # Returns an array if its length is 1
    if length(r.applied.settings[0].logging_level) != 1 and r.applied.settings[0].logging_level != "INFO" and r.applied.settings[0].logging_level != "ERROR" {
            print("aws_api_gateway_method_settings ", address, " doesn't have logging enabled.")
            print("Please enable logging. Example:")
            print("settings {")
            print("   metrics_enabled = true")
            print("   logging_level   = \"INFO\"")
            print("}")
            result["logging_for_api_gateway"] = false
    }
  } // end resource instances

  # Return result with booleans which will be false if there were any violations
  return result
}

##### Rules #####

# Call the validation function
validations = validate()
logging_for_api_gateway = validations["logging_for_api_gateway"]

# Main rule
main = rule {
  logging_for_api_gateway
}
