# Validate if all SQS queues have KMS enabled

##### Imports #####

# ***** Imports ***** #
# insert imports here
import "tfplan"
import "strings"
import "json"

# ******************

# ***** Shared Functions ***** #
# Shared functions to help writing policies.
find_resources = func(type) {
	resources = {}
	# Iterate over all modules in the tfplan import
	for tfplan.module_paths as path {
		# Iterate over the named resources of desired type in the module
		for tfplan.module(path).resources[type] else {} as name, instances {
			# Iterate over resource instances
			for instances as index, r {

				# Get the address of the instance
				if length(path) == 0 {
					# root module
					address = type + "." + name + "[" + string(index) + "]"
				} else {
					# non-root module
					address = "module." + strings.join(path, ".module.") + "." +
						type +
						"." +
						name +
						"[" +
						string(index) +
						"]"
				}

				# Add the instance to resources map, setting the key to the address
				resources[address] = r
			}
		}
	}

	return resources
}

get_policy = func(name) {
	for policy_resources as _, policy {
		if policy.applied.repository == name {
			return policy.applied.policy
		}

	}
	return ""
}

check_policy = func(policy) {
	if policy == "" {
		return true # empty policy
	}
	j = json.unmarshal(policy)
	for j["Statement"] as statement {
		if statement["Principal"] == "*" {
			return false
		}
	}
	return true
}

##### Functions #####

# Function to validate that encryption is enabled
validate_encryption = func() {

	# Initialize booleans to true
	# They will be set to false if any instances violate rules
	result = {
		"encrypted": true,
	}

	# Get all resources of specified type
	resource_instances = find_resources("aws_sqs_queue")

	# Loop through the resource instances
	for resource_instances as address, r {
	
		# Check for ECR policy value
		ecr_policy_value = get_policy(r.applied.name)
		ecr_policy_check = check_policy(ecr_policy_value)
		if (ecr_policy_check == false) and (ecr.applied.name not in WHITELISTED_RESOURCES) {
			status_policy = false
		}

		# Check whether server-side encryption is enabled
		if length(r.applied.kms_master_key_id) else 0 == 0 {
			print("SQS", address, "is not encrypted.")
			print("Please enable server side encryption. Example:")
			print("kms_master_key_id                 = \"alias/aws/sqs\"")
			result["encrypted"] = false
		}

	} // end resource instances

	# Return result with booleans which will be false if there were any violations
	return result
}

##### Rules #####

# Call the validation function
validations = validate_encryption()

# Main rule
main = rule {
	validations["encrypted"]
}
