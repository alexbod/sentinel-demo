import "strings"
import "tfplan"


# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {
  resources = find_raw_resources_from_plan(type)
  resource_map = {}
  for resources as address, r {
    current_resource = null
    if "applied" in r {
      current_resource = r.applied
    } else if "diff" in r {
      current_resource = r.diff
    }
    resource_map[address] = current_resource
  }
  return resource_map
}


# Find all name of a specific type from all modules using the tfplan import
find_name_from_plan = func(type) {
	resources = []
	for tfplan.module_paths as path {
		for tfplan.module(path).resources[type] else {} as name, instances {
			resources += [name]
		}
	}
	return resources
}

# Find diff
find_diff_from_plan = func(type) {
	resources = []
	for tfplan.module_paths as path {
		for tfplan.module(path).resources[type] else {} as name, instances {
			for instances as index, r {
				resources += [r.diff["replication_group_id"]["new"]]
			}
		}
	}
	return resources
}

# Find diff
find_diff_logging_level_from_plan = func(type) {
	resources = []
	for tfplan.module_paths as path {
		for tfplan.module(path).resources[type] else {} as name, instances {
			for instances as index, r {
				resources += [r.diff["transit_encryption_enabled"]["new"]]
			}
		}
	}
	return resources
}



name = find_name_from_plan("aws_elasticache_replication_group")
print("name = ", name)
name_cluster = find_name_from_plan("aws_elasticache_cluster")
print("name_cluster = ", name_cluster)
diff = find_diff_from_plan("aws_elasticache_cluster")
print("diff = ", diff)
diff_logging_level = find_diff_logging_level_from_plan("aws_elasticache_replication_group")
print("diff_logging_level = ", diff_logging_level)

print(diff_logging_level)


validate = func() {
	for diff_logging_level as tl {
		if tl != "true" {
			return false
		}
	}
	for name_cluster as t {
		print("t = ", t)

		# ${aws_elasticache_replication_group.main_redis.id}
		if ("${aws_elasticache_replication_group." + t + ".id}") not in diff {
			print("t, "doesn't have logging enabled.")
			return false
		}
	}

	return true
}

main = rule {
	validate()
}
