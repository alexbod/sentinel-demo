# This policy validates if VPCs have flow logs configured

##### Imports #####

import "tfconfig"
import "strings"
import "types"

##### Functions #####

# Find all resources of specific type from all modules using the tfconfig import
find_resources_from_config = func(type) {

  resources = {}

  # Iterate over all modules in the tfconfig import
  for tfconfig.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfconfig.module(path).resources[type] else {} as name, r {

      # Get the address of the resource
      if length(path) == 0 {
        # root module
        address = type + "." + name
      } else {
        # non-root module
        address = "module." + strings.join(path, ".module.") + "." +
                  type + "." + name
      }

      # Add the resource to resources map, setting the key to the address
      resources[address] = r
    }
  }

  return resources
}

vpc_resources = find_resources_from_config("aws_elasticache_cluster")
flow_resources = find_resources_from_config("aws_elasticache_replication_group")
vpc_with_references = []
vpc_flow_logs_results = true

# Find VPCs with flow logs enabled
for flow_resources as address, r_flow_addr {
  for vpc_resources as address_vpc, r_vpc_addr {
  	print(r_flow_addr)
    # Trim Terraform vpc_id reference variable to get defined vpc address
    #if r_flow_addr.config.vpc_id[2 : length(r_flow_addr.config.vpc_id) - 4] == address_vpc {
      #append(vpc_with_references, address_vpc)
    #}
  }
}

# Validate if all VPCs have flow logs enabled
for vpc_resources as address, r {
  if address not in vpc_with_references {
    print(address, "doesn't have VPC Flow Logs configured. Example: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/flow_log.")
    vpc_flow_logs_results = false
  }
}

##### Rules #####

main = rule { 
    vpc_flow_logs_results
}
