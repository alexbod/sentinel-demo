import "strings"
import "tfplan"

emtpy_replication_group_id = false

# Find all name of a specific type from all modules using the tfplan import
find_name_from_plan = func(type) {
	resources = []
	for tfplan.module_paths as path {
		for tfplan.module(path).resources[type] else {} as name, instances {
			resources += [name]
		}
	}
	return resources
}

# Find diff
find_diff_from_plan = func(type) {
	resources = []
	for tfplan.module_paths as path {
		for tfplan.module(path).resources[type] else {} as name, instances {
			for instances as index, r {
				if r.diff["replication_group_id"]["new"] == "" {
					print("Empty")
					emtpy_replication_group_id = true
				}
				
        			print("In search diff = ", r.diff["replication_group_id"]["new"])
				resources += [r.diff["replication_group_id"]["new"]]
			}
		}
	}
	return resources
}

# Find diff
find_diff_logging_level_from_plan = func(type) {
	resources = []
	for tfplan.module_paths as path {
		for tfplan.module(path).resources[type] else {} as name, instances {
			for instances as index, r {
				resources += [r.diff["transit_encryption_enabled"]["new"]]
			}
		}
	}
	return resources
}

name = find_name_from_plan("aws_elasticache_replication_group")
print("name = ", name)
diff = find_diff_from_plan("aws_elasticache_cluster")
print("diff = ", diff)
diff_logging_level = find_diff_logging_level_from_plan("aws_elasticache_replication_group")
print("diff_logging_level = ", diff_logging_level)

print(diff_logging_level)


validate = func() {
	for diff as pl {
		print(pl)
		if pl == "" {
			print("Yes1")
			return false
		}
	}
	
	for diff_logging_level as tl {
		if tl != "true" {
			print("Yes2")
			return false
		}
	}
	for name as t {
		# ${aws_elasticache_replication_group.main_redis.id}
		print("t = ", t)
		if ("${aws_elasticache_replication_group." + t + ".id}") not in diff {
			print("Yes3")
			print("aws_api_gateway_rest_api", t, "doesn't have logging enabled.")
			print("Please enable logging. Example:")
			print("settings {")
			print("   metrics_enabled = true")
			print("   logging_level   = \"INFO\"")
			print("}")
			return false
		}
	}

	return true
}

main = rule {
	validate()
}
