# Validate if all SQS queues are not public

##### Imports #####

import "tfplan"
import "json"
import "strings"

# Find all data sources of a specific type from all modules using the tfplan import
find_datasources_from_plan = func(type) {

  datasources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named datasources of desired type in the module
    for tfplan.module(path).data[type] else {} as name, instances {
      # Iterate over datasource instances
      for instances as index, d {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to datasources map, setting the key to the address
        datasources[address] = d
      }
    }
  }

  return datasources
}

find_name_from_plan = func(type) {

	resources = []

	for tfplan.module_paths as path {
		for tfplan.module(path).resources[type] else {} as name, instances {
			resources += [name]
		}
	}

	return resources
}

find_resources = func(type) {
	resources = {}
	# Iterate over all modules in the tfplan import
	for tfplan.module_paths as path {
		# Iterate over the named resources of desired type in the module
		for tfplan.module(path).resources[type] else {} as name, instances {
			# Iterate over resource instances
			for instances as index, r {

				# Get the address of the instance
				if length(path) == 0 {
					# root module
					address = type + "." + name + "[" + string(index) + "]"
				} else {
					# non-root module
					address = "module." + strings.join(path, ".module.") + "." +
						type +
						"." +
						name +
						"[" +
						string(index) +
						"]"
				}

				# Add the instance to resources map, setting the key to the address
				resources[address] = r
			}
		}
	}

	return resources
}

# Check if Principal == "*" for a SQS policy
check_policy = func(policy) {
	if policy == "" {
		return true # empty policy
	} else if policy[:1] == "$" { # Cheking if the policy is variable
		// ${data.template_file.user_service_queue_policy.rendered}
		//policy_object = strings.split(policy[1:-1], ".")
		//print(policy_object)
		print(policy)
		print(policy[2 : length(policy) - 1])
		policy_object_clean = policy[2 : length(policy) - 1]
		policy_object_clean_array = strings.split(policy_object_clean, ".")
		print(policy_object_clean_array)
		
		resource_instances_policy = find_name_from_plan("user_service_queue_policy")
		print(resource_instances_policy)
		
		print(find_datasources_from_plan("data"))
		print(find_datasources_from_plan("template_file"))
		print(find_datasources_from_plan("aws_sqs_queue_policy"))
		
		# Skip the first element "data"
		print(find_datasources_from_plan(policy_object_clean_array[1]))
		
		resource_instances_policy = find_datasources_from_plan(policy_object_clean_array[1])
		
		# Loop through the resource instances
		for resource_instances_policy as address, r {
		
			print(address)
			print(r)
			print(r.applied.template)
			jj = json.unmarshal(r.applied.template)
			
			for jj["Statement"] as statement {
				if len(statement["Principal"]) > 0 and statement["Principal"] == "*" {
					return false
				}
			}
			
			//# Check for SQS policy value
			//if (check_policy(r.diff.policy.new) == false) {
			//	return false
			//}

		} // end resource instances
		
		
		
		return true
	}
	j = json.unmarshal(policy)
	for j["Statement"] as statement {
		if statement["Principal"] == "*" {
			return false
		}
	}
	return true
}

##### Functions #####

# Function to validate that all SQS queues are not public
public_sqs = func() {

	# Get all resources of specified type
	//resource_instances = tfplanfunctions.find_resources_from_plan("aws_sqs_queue_policy")
	resource_instances = find_resources("aws_sqs_queue_policy")

	# Loop through the resource instances
	for resource_instances as address, r {
	
		# Check for SQS policy value
		if (check_policy(r.diff.policy.new) == false) {
			return false
		}

	} // end resource instances

	return true
}

##### Rules #####

# Main rule
main = rule {
	public_sqs()
}
