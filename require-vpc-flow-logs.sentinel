# This policy uses the Sentinel tfplan import to require that
# all S3 buckets have to be encrypted

##### Imports #####

import "tfplan"
import "strings"


# Allowed unencrypted s3 buckets
allowed_s3_unencrypted = [
   "test",
]

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Function to validate that encryption used
validate_encryption = func() {

  # Initialize booleans to true
  # They will be set to false if any instances violate rules
  result = {
    "encrypted": true,
  }

  # Get all resources of specified type
  resource_instances = find_resources_from_plan("aws_vpc")

  print(resource_instances)
  
  resource_instances_flogs = find_resources_from_plan("aws_flow_log")

  print(resource_instances_flogs)
  
  

  # Return result with booleans which will be false if there were any violations
  return result
}

##### Rules #####

# Call the validation function
validations = validate_encryption()
all_buckets_encrypted = validations["encrypted"]

# Main rule
main = rule {
  all_buckets_encrypted
}
