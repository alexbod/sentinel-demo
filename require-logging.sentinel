##### Imports #####
import "tfplan"
import "strings"

##### Functions #####

# Find all name of a specific type from all modules using the tfplan import
find_name_from_plan = func(type) {

	resources = []

	for tfplan.module_paths as path {
		for tfplan.module(path).resources[type] else {} as name, instances {
			resources += [name]
		}
	}

	return resources
}

# Find diff
find_diff_from_plan = func(type) {

	resources = []

	for tfplan.module_paths as path {
		for tfplan.module(path).resources[type] else {} as name, instances {
			for instances as index, r {
				resources += [r.diff["rest_api_id"]["new"]]
			}
		}
	}

	return resources
}

# Find diff
find_diff_logging_level_from_plan = func(type) {

	resources = []

	for tfplan.module_paths as path {
		for tfplan.module(path).resources[type] else {} as name, instances {
			for instances as index, r {
				resources += [r.diff["settings.0.logging_level"]["new"]]
			}
		}
	}

	return resources
}

name = find_name_from_plan("aws_api_gateway_rest_api")
diff = find_diff_from_plan("aws_api_gateway_method_settings")
diff_logging_level = find_diff_logging_level_from_plan("aws_api_gateway_method_settings")

validate = func() {
	result = true
	for diff_logging_level as tl {
		if tl != "INFO" and tl != "ERROR" {
			result = false
		}
	}
	for name as t {
		if ("${aws_api_gateway_rest_api." + t + ".id}") not in diff {
			print("aws_api_gateway_rest_api", t, "doesn't have logging enabled.")
			print("Please enable logging. Example:")
			print("settings {")
			print("   metrics_enabled = true")
			print("   logging_level   = \"INFO\"")
			print("}")
			result = false
		}
	}

	return result
}

main = rule {
	validate()
}
