import "tfplan"


allowed_s3_unencrypted = [
  "b",
  "my-tf-test-bucket-test",
]

# Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources['aws_s3_bucket'] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        print(resources[address])
        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

# Get all S3 buckets from all modules
get_s3_buckets = func() {
    buckets = []
    for tfplan.module_paths as path {
            print(tfplan.module(path).resources.aws_s3_bucket)
            
            
            
            buckets += values(tfplan.module(path).resources.aws_s3_bucket) else []
            
    }
    return buckets
}
  
s3_buckets = get_s3_buckets()

/*
# Allowed S3 ACLs
# Don't allow public-read-write
allowed_acls = [
  "private",
]

# Rule to restrict S3 bucket ACLs
acl_allowed = rule {
    all s3_buckets as _, instances {
      all instances as index, r {
  	   r.applied.acl in allowed_acls
      }
    }
}
*/
  
# Rule to require server-side encryption
require_encryption = rule {
    all s3_buckets as _, instances {
      all instances as index, r {
        (length(r.applied.server_side_encryption_configuration) > 0 and r.applied.server_side_encryption_configuration[0]["rule"][0].apply_server_side_encryption_by_default[0].sse_algorithm is "aws:kms") else false
      }
   }
}
  
# Main rule that requires other rules to be true
main = rule {
  #(acl_allowed and require_encryption) else true
  require_encryption else true
}
